Fast I/O for Competitive Programming

when you need a lot of input output in cpp
then use : #define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
or 
#define optimize() ios_base::sync_with_stdio(0); 

#include <bits/stdc++.h>
using namespace std;
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

//or use this : 

#define optimize() ios_base::sync_with_stdio(0); 

int main()
{
    


return 0;
}




Additional :


Fast I/O for Competitive Programming
Difficulty Level : Easy
 Last Updated : 17 Feb, 2021
In competitive programming, it is important to read input as fast as possible so we save valuable time.

You must have seen various problem statements saying: “Warning: Large I/O data, be careful with certain languages (though most should be OK if the algorithm is well designed)”. Key for such problems is to use Faster I/O techniques.

It is often recommended to use scanf/printf instead of cin/cout for a fast input and output. However, you can still use cin/cout and achieve the same speed as scanf/printf by including the following two lines in your main() function:

    ios_base::sync_with_stdio(false);
It toggles on or off the synchronization of all the C++ standard streams with their corresponding standard C streams if it is called before the program performs its first input or output operation. Adding ios_base::sync_with_stdio (false); (which is true by default) before any I/O operation avoids this synchronization. It is a static member of function of std::ios_base.

    cin.tie(NULL);
tie() is a method which simply guarantees the flushing of std::cout before std::cin accepts an input. This is useful for interactive console programs which require the console to be updated constantly but also slows down the program for large I/O. The NULL part just returns a NULL pointer.